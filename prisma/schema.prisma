// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  votes             Vote[]

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Question    Question[]
  Answer     Answer[]
  AnswerVote AnswerVote[]
}

model Question {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  answers    Answer[] 
  votes       Vote[]
}

model Answer {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  question      Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String

  replyToId String?
  replyTo   Answer?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Answer[] @relation("ReplyTo")

  votes     AnswerVote[]
  answerId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  type   VoteType

  @@id([userId, questionId])
}

model AnswerVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  answer   Answer  @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId String
  type      VoteType

  @@id([userId, answerId])
}

